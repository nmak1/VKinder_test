import logging
import re

from typing import Dict, List, Optional

import telebot
from telebot import types
from telebot.apihelper import ApiTelegramException

from config.settings import settings
from database.manager import DatabaseManager
from services.vk_service import VKService
from services.search_service import SearchService
from services.notification_service import NotificationService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('vkinder_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class VKinderBot:
    def __init__(self):
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            self.bot = telebot.TeleBot(settings.TELEGRAM_TOKEN)
            self.db = DatabaseManager(settings.DATABASE_URL)
            self.vk_service = VKService()
            self.search_service = SearchService(self.vk_service, self.db)
            self.notifier = NotificationService(self.bot, settings.ADMIN_IDS)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            if not self.db.health_check():
                raise RuntimeError("Database connection failed")

            # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            self.user_states: Dict[int, str] = {}  # user_id: state
            self.search_results: Dict[int, List[Dict]] = {}
            self.current_match_index: Dict[int, int] = {}
            self.temp_search_params: Dict[int, Dict] = {}

            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            self._register_handlers()

            logger.info("VKinderBot —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.critical(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
            raise

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""

        @self.bot.message_handler(commands=['start'])
        def handle_start(message):
            self._handle_start_command(message)

        @self.bot.message_handler(commands=['help'])
        def handle_help(message):
            self._handle_help_command(message)

        @self.bot.message_handler(commands=['search'])
        def handle_search(message):
            self._handle_search_command(message)

        @self.bot.message_handler(commands=['favorites'])
        def handle_favorites(message):
            self._handle_favorites_command(message)

        @self.bot.callback_query_handler(func=lambda call: True)
        def handle_callback(call):
            self._handle_callback_query(call)

        @self.bot.message_handler(content_types=['text'])
        def handle_text(message):
            self._handle_text_message(message)

    def _handle_callback_query(self, call: types.CallbackQuery) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫"""
        try:
            user_id = call.from_user.id
            chat_id = call.message.chat.id
            data = call.data

            logger.info(f"Callback from {user_id}: {data}")

            # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                self.bot.edit_message_reply_markup(
                    chat_id=chat_id,
                    message_id=call.message.message_id,
                    reply_markup=None
                )
            except Exception as e:
                logger.warning(f"Couldn't remove reply markup: {e}")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
            if data == 'search':
                self._handle_search_command(call.message)
            elif data == 'favorites':
                self._handle_favorites_command(call.message)
            elif data == 'next_match':
                self._show_next_match(call.message, user_id)
            elif data == 'add_favorite':
                self._add_current_match_to_favorites(call.message, user_id)
            elif data == 'add_blacklist':
                self._add_current_match_to_blacklist(call.message, user_id)
            elif data == 'back_to_menu':
                self._handle_start_command(call.message)
            elif data == 'help':
                help_text = (
                    "üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
                    "üîç <b>–ü–æ–∏—Å–∫</b> - –Ω–∞–π—Ç–∏ –∞–Ω–∫–µ—Ç—ã –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º\n"
                    "‚ù§Ô∏è <b>–ò–∑–±—Ä–∞–Ω–Ω–æ–µ</b> - –≤–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã\n\n"
                    "–ü—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∞–Ω–∫–µ—Ç:\n"
                    "‚ù§Ô∏è - –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\n"
                    "üö´ - –¥–æ–±–∞–≤–∏—Ç—å –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫\n"
                    "‚û°Ô∏è - —Å–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞\n"
                    "üè† - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
                )
                self._send_message(
                    call.message.chat.id,
                    help_text
                )
            else:
                logger.warning(f"Unknown callback data: {data}")
                self.bot.answer_callback_query(
                    call.id,
                    "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
                    show_alert=False
                )

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
            self.bot.answer_callback_query(call.id)

        except Exception as e:
            logger.error(f"Error handling callback: {e}")
            self.notifier.send_admin(f"Callback error: {e}\nData: {call.data}")
            try:
                self.bot.answer_callback_query(
                    call.id,
                    "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
                    show_alert=True
                )
            except Exception as e:
                logger.error(f"Failed to answer callback: {e}")

    def _handle_start_command(self, message: types.Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user_id = message.from_user.id
            user = self.db.get_or_create_user(
                telegram_id=user_id,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name
            )

            self.user_states[user_id] = 'main_menu'

            welcome_text = (
                f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
                "–Ø –±–æ—Ç VKinder - –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ª—é–¥–µ–π –≤ VK.\n\n"
                "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )

            self.bot.send_message(
                chat_id=message.chat.id,
                text=welcome_text,
                reply_markup=self._create_main_keyboard(),
                parse_mode="HTML"
            )

            logger.info(f"User {user_id} started the bot")

        except Exception as e:
            logger.error(f"Error in start command: {e}")
            self.notifier.send_admin(f"Start command error: {e}")
            self._send_error_message(message.chat.id)

    def _handle_help_command(self, message: types.Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
            "üîç <b>/search</b> - –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç\n"
            "‚ù§Ô∏è <b>/favorites</b> - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã\n"
            "üè† <b>/start</b> - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
            "–ü–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –∞–Ω–∫–µ—Ç—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚ù§Ô∏è\n"
            "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ üö´\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∞–Ω–∫–µ—Ç—ã ‚û°Ô∏è"
        )
        self._send_message(
            message.chat.id,
            help_text
        )

    def _handle_search_command(self, message: types.Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /search"""
        try:
            user_id = message.from_user.id
            user = self.db.get_user(user_id)

            if not user:
                self.bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return

            if not user.vk_id:
                self.user_states[user_id] = 'waiting_vk_id'
                self.bot.send_message(
                    message.chat.id,
                    "üîó –í–≤–µ–¥–∏—Ç–µ –≤–∞—à VK ID –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å:",
                    reply_markup=self._create_cancel_keyboard()
                )
            else:
                self._request_age_range(message.chat.id, user_id)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ search –∫–æ–º–∞–Ω–¥–µ: {e}")
            self._send_error_message(message.chat.id)

    def _process_vk_id_input(self, message: types.Message) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ VK ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        try:
            user_id = message.from_user.id
            text = message.text.strip()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
            if text.lower() == '‚ùå –æ—Ç–º–µ–Ω–∞':
                self.user_states[user_id] = 'main_menu'
                self._handle_start_command(message)
                return

            # –ò–∑–≤–ª–µ–∫–∞–µ–º VK ID –∏–∑ —Ç–µ–∫—Å—Ç–∞
            vk_id = self._extract_vk_id(text)

            if not vk_id:
                self.bot.send_message(
                    message.chat.id,
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ VK ID –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å:",
                    reply_markup=self._create_cancel_keyboard()
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ VK
            user_info = self.vk_service.get_user_info(vk_id)
            if not user_info:
                self.bot.send_message(
                    message.chat.id,
                    "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π ID:",
                    reply_markup=self._create_cancel_keyboard()
                )
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            age = self.vk_service.calculate_age_from_bdate(user_info.get('bdate'))
            gender = user_info.get('sex')
            city_id = user_info.get('city', {}).get('id')
            city_name = user_info.get('city', {}).get('title')

            success = self.db.update_user_vk_info(
                telegram_id=user_id,
                vk_id=vk_id,
                age=age,
                gender=gender,
                city_id=city_id,
                city_name=city_name
            )

            if success:
                self._request_age_range(message.chat.id, user_id)
            else:
                self._send_error_message(message.chat.id)

        except Exception as e:
            logger.error(f"Error processing VK ID: {e}")
            self._send_error_message(message.chat.id)

    def _extract_vk_id(self, text: str) -> Optional[int]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç VK ID –∏–∑ —Å—Ç—Ä–æ–∫–∏ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã)"""
        # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ
        if text.isdigit():
            return int(text)

        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
        patterns = [
            r'vk\.com/id(\d+)',
            r'vkontakte\.ru/id(\d+)',
            r'm\.vk\.com/id(\d+)',
            r'id(\d+)'
        ]

        for pattern in patterns:
            match = re.search(pattern, text)
            if match:
                return int(match.group(1))

        return None

    def _request_age_range(self, chat_id: int, user_id: int) -> None:
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞"""
        try:
            self.user_states[user_id] = 'waiting_age_from'
            self.bot.send_message(
                chat_id,
                "üî¢ –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ (–æ—Ç 18 –ª–µ—Ç):",
                reply_markup=self._create_cancel_keyboard()
            )
        except Exception as e:
            logger.error(f"Error requesting age range: {e}")
            self._send_error_message(chat_id)

    def _process_age_input(self, message: types.Message, age_type: str) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        try:
            user_id = message.from_user.id
            text = message.text.strip()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
            if text.lower() == '‚ùå –æ—Ç–º–µ–Ω–∞':
                self.user_states[user_id] = 'main_menu'
                self._handle_start_command(message)
                return

            try:
                age = int(text)
                if age < 18 or age > 100:
                    raise ValueError
            except ValueError:
                self.bot.send_message(
                    message.chat.id,
                    "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 18 –¥–æ 100:",
                    reply_markup=self._create_cancel_keyboard()
                )
                return

            if age_type == 'from':
                self.temp_search_params[user_id] = {'age_from': age}
                self.user_states[user_id] = 'waiting_age_to'
                self.bot.send_message(
                    message.chat.id,
                    f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {age}\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–Ω–µ –º–µ–Ω—å—à–µ {age}):",
                    reply_markup=self._create_cancel_keyboard()
                )
            else:
                if user_id not in self.temp_search_params:
                    self.temp_search_params[user_id] = {}

                age_from = self.temp_search_params[user_id].get('age_from', 18)
                if age < age_from:
                    self.bot.send_message(
                        message.chat.id,
                        f"‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ {age_from}:",
                        reply_markup=self._create_cancel_keyboard()
                    )
                    return

                self.temp_search_params[user_id]['age_to'] = age
                self._start_search(
                    message.chat.id,
                    user_id,
                    age_from,
                    age
                )

        except Exception as e:
            logger.error(f"Error processing age input: {e}")
            self._send_error_message(message.chat.id)

    def _start_search(self, chat_id: int, user_id: int, age_from: int, age_to: int) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
        try:
            user = self.db.get_user(user_id)
            if not user or not user.city_id or not user.gender:
                self._send_error_message(chat_id)
                return

            search_msg = self.bot.send_message(
                chat_id,
                f"üîç –ò—â–µ–º –∞–Ω–∫–µ—Ç—ã –≤ –≤–æ–∑—Ä–∞—Å—Ç–µ {age_from}-{age_to} –ª–µ—Ç..."
            )

            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            results = self.search_service.find_matches(
                user_id=user_id,
                age_from=age_from,
                age_to=age_to
            )

            if not results:
                self.bot.edit_message_text(
                    "üòî –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–Ω–∫–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.",
                    chat_id,
                    search_msg.message_id
                )
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.search_results[user_id] = results
            self.current_match_index[user_id] = 0
            self.user_states[user_id] = 'viewing_matches'

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
            self.bot.delete_message(chat_id, search_msg.message_id)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∞–Ω–∫–µ—Ç—É
            self._show_current_match(chat_id, user_id)

        except Exception as e:
            logger.error(f"Error starting search: {e}")
            self._send_error_message(chat_id)
            self.notifier.send_admin(f"Search failed for {user_id}: {e}")

    def _show_current_match(self, chat_id: int, user_id: int) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É"""
        try:
            if user_id not in self.search_results:
                self.bot.send_message(chat_id, "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search")
                return

            current_index = self.current_match_index.get(user_id, 0)
            results = self.search_results[user_id]

            if current_index >= len(results):
                self.bot.send_message(
                    chat_id,
                    "üéâ –í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –∞–Ω–∫–µ—Ç—ã!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞.",
                    reply_markup=self._create_main_keyboard()
                )
                return

            match = results[current_index]
            match_text = self._format_match_text(match, current_index, len(results))

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
            photos = self.search_service.get_match_photos(match['id'])
            if photos:
                media = []
                for i, photo in enumerate(photos[:3]):
                    if i == 0:
                        media.append(types.InputMediaPhoto(
                            photo['url'],
                            caption=match_text,
                            parse_mode="HTML"
                        ))
                    else:
                        media.append(types.InputMediaPhoto(photo['url']))

                self.bot.send_media_group(chat_id, media)
            else:
                self.bot.send_message(
                    chat_id,
                    match_text + "\n\nüì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
                    parse_mode="HTML"
                )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            self.bot.send_message(
                chat_id,
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=self._create_match_keyboard()
            )

        except Exception as e:
            logger.error(f"Error showing match: {e}")
            self.notifier.send_admin(f"Show match error: {e}")
            self._send_error_message(chat_id)

    def _format_match_text(self, match: dict, current: int, total: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã"""
        name = f"{match.get('first_name', '')} {match.get('last_name', '')}"
        age = f", {match.get('age', '')} –ª–µ—Ç" if match.get('age') else ""
        city = f"\nüèô {match.get('city', {}).get('title', '')}" if match.get('city') else ""

        return (
            f"üë§ <b>{name}</b>{age}{city}\n"
            f"üîó <a href='https://vk.com/id{match['id']}'>–ü—Ä–æ—Ñ–∏–ª—å VK</a>\n\n"
            f"üìä –ê–Ω–∫–µ—Ç–∞ {current + 1} –∏–∑ {total}"
        )

    def _show_next_match(self, message: types.Message, user_id: int) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞"""
        try:
            if user_id not in self.current_match_index:
                self.current_match_index[user_id] = 0
            else:
                self.current_match_index[user_id] += 1

            self._show_current_match(message.chat.id, user_id)
        except Exception as e:
            logger.error(f"Error showing next match: {e}")
            self.notifier.notify_error(message.chat.id, "search")

    def _add_current_match_to_favorites(self, message: types.Message, user_id: int) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
        try:
            if user_id not in self.search_results or user_id not in self.current_match_index:
                self.notifier.notify_user(user_id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞")
                return

            current_index = self.current_match_index[user_id]
            match = self.search_results[user_id][current_index]

            success = self.db.add_to_favorites(
                telegram_id=user_id,
                target_vk_id=match['id'],
                target_name=f"{match.get('first_name', '')} {match.get('last_name', '')}",
                target_link=f"https://vk.com/id{match['id']}"
            )

            if success:
                self.notifier.notify_user(user_id, "‚ù§Ô∏è –ê–Ω–∫–µ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
            else:
                self.notifier.notify_user(user_id, "‚ÑπÔ∏è –ê–Ω–∫–µ—Ç–∞ —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")

            self._show_next_match(message, user_id)
        except Exception as e:
            logger.error(f"Error adding to favorites: {e}")
            self.notifier.notify_error(message.chat.id, "general")

    def _add_current_match_to_blacklist(self, message: types.Message, user_id: int) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"""
        try:
            if user_id not in self.search_results or user_id not in self.current_match_index:
                self.notifier.notify_user(user_id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞")
                return

            current_index = self.current_match_index[user_id]
            match = self.search_results[user_id][current_index]

            success = self.db.add_to_blacklist(
                telegram_id=user_id,
                blocked_vk_id=match['id']
            )

            if success:
                self.notifier.notify_user(user_id, "üö´ –ê–Ω–∫–µ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫")
            else:
                self.notifier.notify_user(user_id, "‚ÑπÔ∏è –ê–Ω–∫–µ—Ç–∞ —É–∂–µ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ")

            self._show_next_match(message, user_id)
        except Exception as e:
            logger.error(f"Error adding to blacklist: {e}")
            self.notifier.notify_error(message.chat.id, "general")

    def _handle_favorites_command(self, message: types.Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /favorites"""
        try:
            favorites = self.db.get_favorites(message.from_user.id)

            if not favorites:
                self.bot.send_message(
                    message.chat.id,
                    "üíî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç."
                )
                return

            favorites_text = "‚ù§Ô∏è –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã:\n\n" + "\n".join(
                [f"{i + 1}. <a href='{fav['link']}'>{fav['name']}</a>"
                 for i, fav in enumerate(favorites)]
            )

            self._send_message(
                message.chat.id,
                favorites_text
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ favorites –∫–æ–º–∞–Ω–¥–µ: {e}")
            self._send_error_message(message.chat.id)

    def _handle_text_message(self, message: types.Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            user_id = message.from_user.id
            current_state = self.user_states.get(user_id, 'main_menu')

            if current_state == 'waiting_vk_id':
                self._process_vk_id_input(message)
            elif current_state == 'waiting_age_from':
                self._process_age_input(message, 'from')
            elif current_state == 'waiting_age_to':
                self._process_age_input(message, 'to')
            else:
                self.bot.send_message(
                    message.chat.id,
                    "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help"
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
            self._send_error_message(message.chat.id)

    def _create_main_keyboard(self) -> types.InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        keyboard = types.InlineKeyboardMarkup(row_width=2)

        buttons = [
            types.InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="search"),
            types.InlineKeyboardButton("‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="favorites"),
            types.InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
        ]

        keyboard.add(*buttons)
        return keyboard

    def _create_match_keyboard(self) -> types.InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∫–µ—Ç–∞–º–∏"""
        keyboard = types.InlineKeyboardMarkup(row_width=2)

        buttons = [
            types.InlineKeyboardButton("‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="add_favorite"),
            types.InlineKeyboardButton("üö´ –í —á. —Å–ø–∏—Å–æ–∫", callback_data="add_blacklist"),
            types.InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data="next_match"),
            types.InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="back_to_menu")
        ]

        keyboard.add(*buttons[:2])  # –ü–µ—Ä–≤—ã–π —Ä—è–¥ - 2 –∫–Ω–æ–ø–∫–∏
        keyboard.add(buttons[2])  # –í—Ç–æ—Ä–æ–π —Ä—è–¥ - 1 –∫–Ω–æ–ø–∫–∞
        keyboard.add(buttons[3])  # –¢—Ä–µ—Ç–∏–π —Ä—è–¥ - 1 –∫–Ω–æ–ø–∫–∞

        return keyboard

    def _create_cancel_keyboard(self) -> types.ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
        return keyboard

    def _send_error_message(self, chat_id: int) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        try:
            self.bot.send_message(
                chat_id,
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except ApiTelegramException as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")

    def _send_message(self, chat_id: int, text: str,
                      keyboard: Optional[types.ReplyKeyboardMarkup] = None,
                      parse_mode: Optional[str] = "HTML") -> None:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            self.bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=keyboard,
                parse_mode=parse_mode,
                disable_web_page_preview=True
            )
        except Exception as e:
            logger.error(f"Failed to send message to {chat_id}: {e}")
            self.notifier.send_admin(f"Message send failed to {chat_id}: {e}")

    def run(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        try:
            self.bot.polling(none_stop=True, interval=1, timeout=60)
        except Exception as e:
            logger.critical(f"–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å –æ—à–∏–±–∫–æ–π: {e}")
            self.notifier.send_admin(f"–ë–æ—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {e}")
            raise


if __name__ == "__main__":
    try:
        bot = VKinderBot()
        bot.run()
    except Exception as e:
        logger.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: {e}")