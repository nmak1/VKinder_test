import logging
from typing import Dict, List, Optional

import telebot
from telebot import types
from telebot.apihelper import ApiTelegramException

from config.settings import settings
from database.manager import DatabaseManager
from services.vk_service import VKService
from services.search_service import SearchService
from services.notification_service import NotificationService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('vkinder_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class VKinderBot:
    def __init__(self):
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            self.bot = telebot.TeleBot(settings.TELEGRAM_TOKEN)
            self.db = DatabaseManager(settings.DATABASE_URL)
            self.vk_service = VKService()
            self.search_service = SearchService(self.vk_service, self.db)
            self.notifier = NotificationService(self.bot, settings.ADMIN_IDS)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            if not self.db.health_check():
                raise RuntimeError("Database connection failed")

            # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            self.user_states: Dict[int, str] = {}  # user_id: state
            self.search_results: Dict[int, List[Dict]] = {}
            self.current_match_index: Dict[int, int] = {}

            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            self._register_handlers()

            logger.info("VKinderBot —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.critical(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
            raise

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""

        @self.bot.message_handler(commands=['start'])
        def handle_start(message):
            self._handle_start_command(message)

        @self.bot.message_handler(commands=['help'])
        def handle_help(message):
            self._handle_help_command(message)

        @self.bot.message_handler(commands=['search'])
        def handle_search(message):
            self._handle_search_command(message)

        @self.bot.message_handler(commands=['favorites'])
        def handle_favorites(message):
            self._handle_favorites_command(message)

        @self.bot.callback_query_handler(func=lambda call: True)
        def handle_callback(call):
            self._handle_callback_query(call)

        @self.bot.message_handler(content_types=['text'])
        def handle_text(message):
            self._handle_text_message(message)

    def _handle_callback_query(self, call: types.CallbackQuery) -> None:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –ø—Ä–∏—à–µ–ª –æ—Ç —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if call.from_user.id != call.message.chat.id:
            self.bot.answer_callback_query(call.id, "–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
            return
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫"""
        try:
            user_id = call.from_user.id
            chat_id = call.message.chat.id
            data = call.data

            logger.info(f"Callback from {user_id}: {data}")

            # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                self.bot.edit_message_reply_markup(
                    chat_id=chat_id,
                    message_id=call.message.message_id,
                    reply_markup=None
                )
            except Exception as e:
                logger.warning(f"Couldn't remove reply markup: {e}")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
            if data == 'search':
                self._handle_search_command(call.message)
            elif data == 'favorites':
                self._handle_favorites_command(call.message)
            elif data == 'next_match':
                self._show_next_match(call.message, user_id)
            elif data == 'add_favorite':
                self._add_current_match_to_favorites(call.message, user_id)
            elif data == 'add_blacklist':
                self._add_current_match_to_blacklist(call.message, user_id)
            elif data == 'back_to_menu':
                self._handle_start_command(call.message)
            else:
                logger.warning(f"Unknown callback data: {data}")
                self.bot.answer_callback_query(
                    call.id,
                    "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
                    show_alert=False
                )

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
            self.bot.answer_callback_query(call.id)

        except Exception as e:
            logger.error(f"Error handling callback: {e}")
            self.notifier.send_admin(f"Callback error: {e}\nData: {call.data}")
            try:
                self.bot.answer_callback_query(
                    call.id,
                    "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
                    show_alert=True
                )
            except Exception as e:
                logger.error(f"Failed to answer callback: {e}")

    def _handle_start_command(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user_id = message.from_user.id
            user = self.db.get_or_create_user(
                telegram_id=user_id,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name
            )

            self.user_states[user_id] = 'main_menu'

            welcome_text = (
                f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
                "–Ø –±–æ—Ç VKinder - –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ª—é–¥–µ–π –≤ VK.\n\n"
                "üîç –ò—Å–ø–æ–ª—å–∑—É–π /search –¥–ª—è –ø–æ–∏—Å–∫–∞\n"
                "‚ù§Ô∏è /favorites - —Ç–≤–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã\n"
                "‚ùì /help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"
            )

            self.bot.send_message(
                message.chat.id,
                welcome_text,
                reply_markup=self._create_main_keyboard()
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start –∫–æ–º–∞–Ω–¥–µ: {e}")
            self._send_error_message(message.chat.id)

    def _handle_search_command(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /search"""
        try:
            user_id = message.from_user.id
            user = self.db.get_user(user_id)

            if not user:
                self.bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return

            if not user.vk_id:
                self.user_states[user_id] = 'waiting_vk_id'
                self.bot.send_message(
                    message.chat.id,
                    "üîó –í–≤–µ–¥–∏—Ç–µ –≤–∞—à VK ID –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å:"
                )
            else:
                self._request_age_range(message.chat.id, user_id)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ search –∫–æ–º–∞–Ω–¥–µ: {e}")
            self._send_error_message(message.chat.id)

    def _show_next_match(self, message: types.Message, user_id: int) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞"""
        try:
            if user_id not in self.current_match_index:
                self.current_match_index[user_id] = 0
            else:
                self.current_match_index[user_id] += 1

            self._show_current_match(message.chat.id, user_id)
        except Exception as e:
            logger.error(f"Error showing next match: {e}")
            self.notifier.notify_error(message.chat.id, "search")

    def _add_current_match_to_favorites(self, message: types.Message, user_id: int) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
        try:
            if user_id not in self.search_results or user_id not in self.current_match_index:
                self.notifier.notify_user(user_id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞")
                return

            current_index = self.current_match_index[user_id]
            match = self.search_results[user_id][current_index]

            success = self.db.add_to_favorites(
                telegram_id=user_id,
                target_vk_id=match['id'],
                target_name=f"{match.get('first_name', '')} {match.get('last_name', '')}",
                target_link=f"https://vk.com/id{match['id']}"
            )

            if success:
                self.notifier.notify_user(user_id, "‚ù§Ô∏è –ê–Ω–∫–µ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
            else:
                self.notifier.notify_user(user_id, "‚ÑπÔ∏è –ê–Ω–∫–µ—Ç–∞ —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")

            self._show_next_match(message, user_id)
        except Exception as e:
            logger.error(f"Error adding to favorites: {e}")
            self.notifier.notify_error(message.chat.id, "general")

    def _add_current_match_to_blacklist(self, message: types.Message, user_id: int) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"""
        try:
            if user_id not in self.search_results or user_id not in self.current_match_index:
                self.notifier.notify_user(user_id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞")
                return

            current_index = self.current_match_index[user_id]
            match = self.search_results[user_id][current_index]

            success = self.db.add_to_blacklist(
                telegram_id=user_id,
                blocked_vk_id=match['id']
            )

            if success:
                self.notifier.notify_user(user_id, "üö´ –ê–Ω–∫–µ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫")
            else:
                self.notifier.notify_user(user_id, "‚ÑπÔ∏è –ê–Ω–∫–µ—Ç–∞ —É–∂–µ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ")

            self._show_next_match(message, user_id)
        except Exception as e:
            logger.error(f"Error adding to blacklist: {e}")
            self.notifier.notify_error(message.chat.id, "general")

    def _handle_favorites_command(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /favorites"""
        try:
            favorites = self.db.get_favorites(message.from_user.id)

            if not favorites:
                self.bot.send_message(
                    message.chat.id,
                    "üíî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç."
                )
                return

            favorites_text = "‚ù§Ô∏è –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã:\n\n" + "\n".join(
                [f"{i + 1}. {fav['name']} - {fav['link']}"
                 for i, fav in enumerate(favorites)]
            )

            self.bot.send_message(
                message.chat.id,
                favorites_text,
                disable_web_page_preview=True
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ favorites –∫–æ–º–∞–Ω–¥–µ: {e}")
            self._send_error_message(message.chat.id)

    def _handle_text_message(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            user_id = message.from_user.id
            current_state = self.user_states.get(user_id, 'main_menu')

            if current_state == 'waiting_vk_id':
                self._process_vk_id_input(message)
            elif current_state == 'waiting_age_from':
                self._process_age_input(message, 'from')
            elif current_state == 'waiting_age_to':
                self._process_age_input(message, 'to')
            else:
                self.bot.send_message(
                    message.chat.id,
                    "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help"
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
            self._send_error_message(message.chat.id)

    def _create_match_keyboard(self) -> types.InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∫–µ—Ç–∞–º–∏"""
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton("‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="add_favorite"),
            types.InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data="add_blacklist"),
            types.InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data="next_match"),
            types.InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="back_to_menu")
        )
        return keyboard

    def _send_error_message(self, chat_id):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        try:
            self.bot.send_message(
                chat_id,
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except ApiTelegramException as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        try:
            self.bot.polling(none_stop=True, interval=1, timeout=60)
        except Exception as e:
            logger.critical(f"–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å –æ—à–∏–±–∫–æ–π: {e}")
            self.notifier.send_admin(f"–ë–æ—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {e}")
            raise


if __name__ == "__main__":
    try:
        bot = VKinderBot()
        bot.run()
    except Exception as e:
        logger.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: {e}")