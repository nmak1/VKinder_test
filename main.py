"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å Telegram –±–æ—Ç–∞ VKinder.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É Telegram –±–æ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∫–µ—Ç –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.
–ë–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–∞—Ö–æ–¥–∏—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ
–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É, –ø–æ–ª—É –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é.
"""

import telebot
from telebot import types
import logging
from typing import Dict, Any, List, Optional
import threading
import time

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from config import Config
from database import DatabaseManager, User
from vk_api_client import VKApiClient

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('vkinder_bot.log'),  # –õ–æ–≥–∏ –≤ —Ñ–∞–π–ª
        logging.StreamHandler()                   # –õ–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)

logger = logging.getLogger(__name__)

def command_handler(command: str):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.
    
    Args:
        command (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        
    Returns:
        function: –î–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    def decorator(func):
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ –∫ —Ñ—É–Ω–∫—Ü–∏–∏
        func.command = command
        return func
    return decorator

def user_state_required(required_state: str = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        required_state (str): –¢—Ä–µ–±—É–µ–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        function: –î–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    def decorator(func):
        def wrapper(self, message, *args, **kwargs):
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = message.from_user.id
            current_state = self.user_states.get(user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if required_state and current_state != required_state:
                self.bot.send_message(
                    message.chat.id,
                    "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞."
                )
                return
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–∏—Ç
            return func(self, message, *args, **kwargs)
        return wrapper
    return decorator

class VKinderBot:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ VKinder.
    
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
    –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤.
    
    Attributes:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
        db: –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        vk_client: –ö–ª–∏–µ–Ω—Ç API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
        user_states: –°–ª–æ–≤–∞—Ä—å —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        search_results: –ö—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        current_match_index: –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π –∞–Ω–∫–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    
    def __init__(self, telegram_token: str, vk_token: str, database_url: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ VKinder.
        
        Args:
            telegram_token (str): –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
            vk_token (str): –¢–æ–∫–µ–Ω API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
            database_url (str): URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        """
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –±–æ—Ç–∞
        self.bot = telebot.TeleBot(telegram_token)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.db = DatabaseManager(database_url)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.db.create_tables()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
        self.vk_client = VKApiClient(vk_token)
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        # –ö–ª—é—á - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–Ω–∞—á–µ–Ω–∏–µ - —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.user_states: Dict[int, str] = {}
        
        # –ö—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –ö–ª—é—á - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç
        self.search_results: Dict[int, List[Dict[str, Any]]] = {}
        
        # –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º–æ–π –∞–Ω–∫–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –ö–ª—é—á - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–Ω–∞—á–µ–Ω–∏–µ - –∏–Ω–¥–µ–∫—Å –≤ —Å–ø–∏—Å–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.current_match_index: Dict[int, int] = {}
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self._register_handlers()
        
        logger.info("VKinderBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    def _register_handlers(self) -> None:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞.
        """
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        @self.bot.message_handler(commands=['start'])
        def handle_start(message):
            self.handle_start_command(message)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
        @self.bot.message_handler(commands=['help'])
        def handle_help(message):
            self.handle_help_command(message)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search
        @self.bot.message_handler(commands=['search'])
        def handle_search(message):
            self.handle_search_command(message)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /favorites
        @self.bot.message_handler(commands=['favorites'])
        def handle_favorites(message):
            self.handle_favorites_command(message)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏)
        @self.bot.callback_query_handler(func=lambda call: True)
        def handle_callback(call):
            self.handle_callback_query(call)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        @self.bot.message_handler(content_types=['text'])
        def handle_text(message):
            self.handle_text_message(message)
        
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    @command_handler('start')
    def handle_start_command(self, message: types.Message) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start.
        
        Args:
            message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Telegram
        user_id = message.from_user.id
        first_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        last_name = message.from_user.last_name
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user = self.db.get_or_create_user(user_id, first_name, last_name)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_states[user_id] = 'main_menu'
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name}!\n\n"
            "–Ø –±–æ—Ç VKinder - –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ª—é–¥–µ–π –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ! üíï\n\n"
            "üîç –î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /search\n"
            "‚ù§Ô∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: /favorites\n"
            "‚ùì –ü–æ–º–æ—â—å: /help"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = self._create_main_keyboard()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.bot.send_message(
            message.chat.id,
            welcome_text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({first_name}) –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")
    
    @command_handler('help')
    def handle_help_command(self, message: types.Message) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help.
        
        Args:
            message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        help_text = (
            "üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é VKinder</b>\n\n"
            "üîç <b>/search</b> - –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç\n"
            "‚ù§Ô∏è <b>/favorites</b> - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã\n"
            "üè† <b>/start</b> - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "‚ùì <b>/help</b> - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
            "1Ô∏è‚É£ –í–≤–µ–¥–∏ —Å–≤–æ–π ID –í–ö–æ–Ω—Ç–∞–∫—Ç–µ\n"
            "2Ô∏è‚É£ –£–∫–∞–∂–∏ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞\n"
            "3Ô∏è‚É£ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π –∞–Ω–∫–µ—Ç—ã –∏ –¥–æ–±–∞–≤–ª—è–π –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\n\n"
            "üí° <b>–°–æ–≤–µ—Ç:</b> –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞!"
        )
        
        self.bot.send_message(
            message.chat.id,
            help_text,
            parse_mode='HTML'
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É")
    
    @command_handler('search')
    def handle_search_command(self, message: types.Message) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /search.
        
        Args:
            message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user = self.db.get_user_by_telegram_id(user_id)
        
        if not user:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
        if not user.vk_id:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ID –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
            self.user_states[user_id] = 'waiting_vk_id'
            self.bot.send_message(
                message.chat.id,
                "üîó –î–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∫–µ—Ç –º–Ω–µ –Ω—É–∂–µ–Ω —Ç–≤–æ–π ID –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.\n\n"
                "üìù –í–≤–µ–¥–∏ —Å–≤–æ–π ID (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789) –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å:"
            )
        else:
            # –ï—Å–ª–∏ ID —É–∂–µ –µ—Å—Ç—å, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
            self._request_age_range(message.chat.id, user_id)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫")
    
    @command_handler('favorites')
    def handle_favorites_command(self, message: types.Message) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /favorites.
        
        Args:
            message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç
        favorites = self.db.get_favorites(user_id)
        
        if not favorites:
            # –ï—Å–ª–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
            self.bot.send_message(
                message.chat.id,
                "üíî –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç.\n\n"
                "–ù–∞—á–Ω–∏ –ø–æ–∏—Å–∫ —Å –ø–æ–º–æ—â—å—é /search –∏ –¥–æ–±–∞–≤–ª—è–π –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –ø—Ä–æ—Ñ–∏–ª–∏!"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
        favorites_text = "‚ù§Ô∏è <b>–¢–≤–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã:</b>\n\n"
        
        for i, favorite in enumerate(favorites, 1):
            favorites_text += (
                f"{i}. <a href='{favorite['link']}'>{favorite['name']}</a>\n"
                f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {favorite['added_at'].strftime('%d.%m.%Y')}\n\n"
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
        self.bot.send_message(
            message.chat.id,
            favorites_text,
            parse_mode='HTML',
            disable_web_page_preview=True
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ({len(favorites)} –∞–Ω–∫–µ—Ç)")
    
    def handle_callback_query(self, call: types.CallbackQuery) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç inline –∫–Ω–æ–ø–æ–∫.
        
        Args:
            call (types.CallbackQuery): Callback-–∑–∞–ø—Ä–æ—Å
        """
        user_id = call.from_user.id
        data = call.data
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã callback-–∑–∞–ø—Ä–æ—Å–æ–≤
            if data == 'start_search':
                # –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫
                self.handle_search_command(call.message)
            
            elif data == 'show_favorites':
                # –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                self.handle_favorites_command(call.message)
            
            elif data == 'add_favorite':
                # –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                self._add_current_match_to_favorites(call.message, user_id)
            
            elif data == 'add_blacklist':
                # –î–æ–±–∞–≤–∏—Ç—å –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
                self._add_current_match_to_blacklist(call.message, user_id)
            
            elif data == 'next_match':
                # –°–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞
                self._show_next_match(call.message, user_id)
            
            elif data == 'back_to_menu':
                # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                self.handle_start_command(call.message)
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback-–∑–∞–ø—Ä–æ—Å–∞
            self.bot.answer_callback_query(call.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback {data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            self.bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    @user_state_required()
    def handle_text_message(self, message: types.Message) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            message (types.Message): –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        user_id = message.from_user.id
        text = message.text.strip()
        current_state = self.user_states.get(user_id, 'main_menu')
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if current_state == 'waiting_vk_id':
            self._process_vk_id_input(message, text)
        
        elif current_state == 'waiting_age_from':
            self._process_age_from_input(message, text)
        
        elif current_state == 'waiting_age_to':
            self._process_age_to_input(message, text)
        
        else:
            # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã
            self.bot.send_message(
                message.chat.id,
                "ü§î –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
                "/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                "/search - –ø–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç\n"
                "/favorites - –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\n"
                "/help - —Å–ø—Ä–∞–≤–∫–∞"
            )
    
    def _process_vk_id_input(self, message: types.Message, text: str) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ ID –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.
        
        Args:
            message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            text (str): –í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        user_id = message.from_user.id
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Å—ã–ª–∫–æ–π –∏–ª–∏ —á–∏—Å–ª–æ–º)
        vk_id = self._extract_vk_id(text)
        
        if not vk_id:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.\n\n"
                "–í–≤–µ–¥–∏ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789) –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å:"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
        vk_user_info = self.vk_client.get_user_info(vk_id)
        
        if not vk_user_info:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫—Ä—ã—Ç.\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å ID –∏ —É–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:"
            )
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        age = None
        if 'bdate' in vk_user_info:
            age = self.vk_client.calculate_age_from_bdate(vk_user_info['bdate'])
        
        gender = vk_user_info.get('sex')
        city_id = None
        city_name = None
        
        if 'city' in vk_user_info:
            city_id = vk_user_info['city']['id']
            city_name = vk_user_info['city']['title']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        success = self.db.update_user_vk_info(
            user_id, vk_id, age, gender, city_id, city_name
        )
        
        if success:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_name = f"{vk_user_info.get('first_name', '')} {vk_user_info.get('last_name', '')}"
            info_text = f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω: {user_name}\n"
            
            if age:
                info_text += f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\n"
            if city_name:
                info_text += f"üèô –ì–æ—Ä–æ–¥: {city_name}\n"
            
            self.bot.send_message(message.chat.id, info_text)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            self._request_age_range(message.chat.id, user_id)
        else:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."
            )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª VK ID: {vk_id}")
    
    def _process_age_from_input(self, message: types.Message, text: str) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞.
        
        Args:
            message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            text (str): –í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        user_id = message.from_user.id
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
            age_from = int(text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–æ–∑—Ä–∞—Å—Ç–∞
            if age_from < 18:
                self.bot.send_message(
                    message.chat.id,
                    "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 18 –ª–µ—Ç.\n"
                    "–í–≤–µ–¥–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç:"
                )
                return
            
            if age_from > 100:
                self.bot.send_message(
                    message.chat.id,
                    "‚ùå –í–æ–∑—Ä–∞—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 100 –ª–µ—Ç.\n"
                    "–í–≤–µ–¥–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç:"
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            if not hasattr(self, 'temp_search_params'):
                self.temp_search_params = {}
            
            if user_id not in self.temp_search_params:
                self.temp_search_params[user_id] = {}
            
            self.temp_search_params[user_id]['age_from'] = age_from
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞
            self.user_states[user_id] = 'waiting_age_to'
            self.bot.send_message(
                message.chat.id,
                f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {age_from}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–±–æ–ª—å—à–µ {age_from}):"
            )
            
        except ValueError:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.\n–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:"
            )
    
    def _process_age_to_input(self, message: types.Message, text: str) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–∏—Å–∫.
        
        Args:
            message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            text (str): –í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        user_id = message.from_user.id
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
            age_to = int(text)
            
            # –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            age_from = self.temp_search_params.get(user_id, {}).get('age_from', 18)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–æ–∑—Ä–∞—Å—Ç–∞
            if age_to <= age_from:
                self.bot.send_message(
                    message.chat.id,
                    f"‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ {age_from}.\n"
                    f"–í–≤–µ–¥–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç:"
                )
                return
            
            if age_to > 100:
                self.bot.send_message(
                    message.chat.id,
                    "‚ùå –í–æ–∑—Ä–∞—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 100 –ª–µ—Ç.\n"
                    "–í–≤–µ–¥–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç:"
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç
            self.temp_search_params[user_id]['age_to'] = age_to
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
            self._start_search(message.chat.id, user_id, age_from, age_to)
            
        except ValueError:
            self.bot.send_message(
                message.chat.id,
                "‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:"
            )
    
    def _request_age_range(self, chat_id: int, user_id: int) -> None:
        """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞.
        
        Args:
            chat_id (int): ID —á–∞—Ç–∞
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        self.user_states[user_id] = 'waiting_age_from'
        self.bot.send_message(
            chat_id,
            "üéØ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞.\n\n"
            "–í–≤–µ–¥–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 18 –ª–µ—Ç):"
        )
    
    def _start_search(self, chat_id: int, user_id: int, age_from: int, age_to: int) -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.
        
        Args:
            chat_id (int): ID —á–∞—Ç–∞
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            age_from (int): –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç
            age_to (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç
        """
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user = self.db.get_user_by_telegram_id(user_id)
        
        if not user or not user.vk_id or not user.gender or not user.city_id:
            self.bot.send_message(
                chat_id,
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π /search –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
        search_message = self.bot.send_message(
            chat_id,
            "üîç –ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∞–Ω–∫–µ—Ç—ã...\n"
            f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {age_from}-{age_to} –ª–µ—Ç, {user.city_name}"
        )
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
            search_results = self.vk_client.search_users(
                age_from=age_from,
                age_to=age_to,
                sex=user.gender,
                city_id=user.city_id,
                count=50
            )
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–∏—Å–∫–ª—é—á–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
            filtered_results = []
            for result in search_results:
                if not self.db.is_in_blacklist(user_id, result['id']):
                    filtered_results.append(result)
            
            if not filtered_results:
                self.bot.edit_message_text(
                    "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–Ω–∫–µ—Ç.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.",
                    chat_id,
                    search_message.message_id
                )
                self.user_states[user_id] = 'main_menu'
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            self.search_results[user_id] = filtered_results
            self.current_match_index[user_id] = 0
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
            self.bot.delete_message(chat_id, search_message.message_id)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∞–Ω–∫–µ—Ç—É
            self._show_current_match(chat_id, user_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.user_states[user_id] = 'viewing_matches'
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(filtered_results)} –∞–Ω–∫–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            self.bot.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
                chat_id,
                search_message.message_id
            )
            self.user_states[user_id] = 'main_menu'
    
    def _show_current_match(self, chat_id: int, user_id: int) -> None:
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        
        Args:
            chat_id (int): ID —á–∞—Ç–∞
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        if user_id not in self.search_results or not self.search_results[user_id]:
            self.bot.send_message(
                chat_id,
                "‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π /search –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
        current_index = self.current_match_index.get(user_id, 0)
        results = self.search_results[user_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏ –∞–Ω–∫–µ—Ç—ã
        if current_index >= len(results):
            self.bot.send_message(
                chat_id,
                "üéâ –¢—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π /search –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞.",
                reply_markup=self._create_main_keyboard()
            )
            self.user_states[user_id] = 'main_menu'
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É
        current_match = results[current_index]
        match_vk_id = current_match['id']
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        photos = self.vk_client.get_user_photos(match_vk_id, count=3)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–∫–µ—Ç–µ
        first_name = current_match.get('first_name', '–ò–º—è —Å–∫—Ä—ã—Ç–æ')
        last_name = current_match.get('last_name', '')
        full_name = f"{first_name} {last_name}".strip()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
        age_text = ""
        if 'bdate' in current_match:
            age = self.vk_client.calculate_age_from_bdate(current_match['bdate'])
            if age:
                age_text = f", {age} –ª–µ—Ç"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        match_text = (
            f"üë§ <b>{full_name}</b>{age_text}\n"
            f"üîó <a href='https://vk.com/id{match_vk_id}'>–ü—Ä–æ—Ñ–∏–ª—å –í–ö–æ–Ω—Ç–∞–∫—Ç–µ</a>\n\n"
            f"üìä –ê–Ω–∫–µ—Ç–∞ {current_index + 1} –∏–∑ {len(results)}"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∞–Ω–∫–µ—Ç–æ–π
        keyboard = self._create_match_keyboard()
        
        if photos:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –≥—Ä—É–ø–ø–æ–π
            media_group = []
            for i, photo in enumerate(photos[:3]):  # –ú–∞–∫—Å–∏–º—É–º 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                if i == 0:
                    # –ö –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                    media_group.append(
                        types.InputMediaPhoto(
                            photo['url'],
                            caption=match_text,
                            parse_mode='HTML'
                        )
                    )
                else:
                    media_group.append(types.InputMediaPhoto(photo['url']))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            self.bot.send_media_group(chat_id, media_group)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            self.bot.send_message(
                chat_id,
                "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard
            )
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            self.bot.send_message(
                chat_id,
                match_text + "\n\nüì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
                reply_markup=keyboard,
                parse_mode='HTML',
                disable_web_page_preview=True
            )
        
        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–∞ –∞–Ω–∫–µ—Ç–∞ {current_index + 1}/{len(results)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    
    def _show_next_match(self, message: types.Message, user_id: int) -> None:
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É.
        
        Args:
            message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π –∞–Ω–∫–µ—Ç—ã
        if user_id in self.current_match_index:
            self.current_match_index[user_id] += 1
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
        self._show_current_match(message.chat.id, user_id)
    
    def _add_current_match_to_favorites(self, message: types.Message, user_id: int) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.
        
        Args:
            message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—É—â–µ–π –∞–Ω–∫–µ—Ç—ã
        if (user_id not in self.search_results or 
            user_id not in self.current_match_index or
            not self.search_results[user_id]):
            self.bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∞–Ω–∫–µ—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É
        current_index = self.current_match_index[user_id]
        results = self.search_results[user_id]
        
        if current_index >= len(results):
            self.bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∞–Ω–∫–µ—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ."
            )
            return
        
        current_match = results[current_index]
        match_vk_id = current_match['id']
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –∏ —Å—Å—ã–ª–∫—É
        first_name = current_match.get('first_name', '–ò–º—è —Å–∫—Ä—ã—Ç–æ')
        last_name = current_match.get('last_name', '')
        full_name = f"{first_name} {last_name}".strip()
        profile_link = f"https://vk.com/id{match_vk_id}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        success = self.db.add_to_favorites(user_id, match_vk_id, full_name, profile_link)
        
        if success:
            self.bot.send_message(
                message.chat.id,
                f"‚ù§Ô∏è {full_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!"
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {full_name}")
        else:
            self.bot.send_message(
                message.chat.id,
                f"‚ÑπÔ∏è {full_name} —É–∂–µ –≤ —Ç–≤–æ–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–º."
            )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
        self._show_next_match(message, user_id)
    
    def _add_current_match_to_blacklist(self, message: types.Message, user_id: int) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.
        
        Args:
            message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—É—â–µ–π –∞–Ω–∫–µ—Ç—ã
        if (user_id not in self.search_results or 
            user_id not in self.current_match_index or
            not self.search_results[user_id]):
            self.bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∞–Ω–∫–µ—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É
        current_index = self.current_match_index[user_id]
        results = self.search_results[user_id]
        
        if current_index >= len(results):
            self.bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∞–Ω–∫–µ—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫."
            )
            return
        
        current_match = results[current_index]
        match_vk_id = current_match['id']
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
        success = self.db.add_to_blacklist(user_id, match_vk_id)
        
        if success:
            self.bot.send_message(
                message.chat.id,
                "üö´ –ê–Ω–∫–µ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è."
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: {match_vk_id}")
        else:
            self.bot.send_message(
                message.chat.id,
                "‚ÑπÔ∏è –≠—Ç–∞ –∞–Ω–∫–µ—Ç–∞ —É–∂–µ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ."
            )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
        self._show_next_match(message, user_id)
    
    def _create_main_keyboard(self) -> types.InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞.
        
        Returns:
            types.InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        """
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        
        # –ö–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        search_btn = types.InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="start_search")
        favorites_btn = types.InlineKeyboardButton("‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="show_favorites")
        
        keyboard.add(search_btn, favorites_btn)
        
        return keyboard
    
    def _create_match_keyboard(self) -> types.InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∞–Ω–∫–µ—Ç–æ–π.
        
        Returns:
            types.InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∞–Ω–∫–µ—Ç–æ–π
        """
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∞–Ω–∫–µ—Ç–æ–π
        favorite_btn = types.InlineKeyboardButton("‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="add_favorite")
        blacklist_btn = types.InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data="add_blacklist")
        next_btn = types.InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data="next_match")
        menu_btn = types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
        
        keyboard.add(favorite_btn, blacklist_btn)
        keyboard.add(next_btn)
        keyboard.add(menu_btn)
        
        return keyboard
    
    def _extract_vk_id(self, text: str) -> Optional[int]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (—Å—Å—ã–ª–∫–∏ –∏–ª–∏ —á–∏—Å–ª–∞).
        
        Args:
            text (str): –¢–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Returns:
            Optional[int]: ID –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –∏–ª–∏ None
        """
        import re
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã
        text = text.strip()
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ
        if text.isdigit():
            return int(text)
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –∏–∑ —Å—Å—ã–ª–æ–∫ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
        patterns = [
            r'vk\.com/id(\d+)',           # https://vk.com/id123456
            r'vkontakte\.ru/id(\d+)',     # https://vkontakte.ru/id123456
            r'm\.vk\.com/id(\d+)',        # https://m.vk.com/id123456
            r'id(\d+)',                   # id123456
        ]
        
        # –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
        for pattern in patterns:
            match = re.search(pattern, text)
            if match:
                return int(match.group(1))
        
        return None
    
    def run(self) -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling.
        """
        logger.info("–ó–∞–ø—É—Å–∫ VKinder –±–æ—Ç–∞...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            self.bot.polling(none_stop=True, interval=1, timeout=60)
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
            raise

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        Config.validate()
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        bot = VKinderBot(
            telegram_token=Config.TELEGRAM_TOKEN,
            vk_token=Config.VK_TOKEN,
            database_url=Config.DATABASE_URL
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot.run()
        
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    main()
