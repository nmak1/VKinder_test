import logging
from typing import List, Optional
import telebot
from telebot import types

logger = logging.getLogger(__name__)


class NotificationService:
    def __init__(self, bot: telebot.TeleBot, admin_ids: List[int]):
        """
        –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º

        :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
        :param admin_ids: –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        """
        self.bot = bot
        self.admin_ids = admin_ids or []
        logger.info(f"NotificationService initialized with {len(admin_ids)} admins")

    def send_admin(self, message: str, parse_mode: Optional[str] = None) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º

        :param message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        :param parse_mode: –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (HTML/Markdown)
        """
        for admin_id in self.admin_ids:
            try:
                self.bot.send_message(
                    admin_id,
                    f"‚ö†Ô∏è ADMIN NOTIFICATION:\n{message}",
                    parse_mode=parse_mode
                )
                logger.info(f"Admin notification sent to {admin_id}")
            except Exception as e:
                logger.error(f"Failed to send admin notification to {admin_id}: {e}")

    def notify_user(self, user_id: int, message: str,
                    keyboard: Optional[types.ReplyKeyboardMarkup] = None,
                    parse_mode: Optional[str] = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        :param message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        :param keyboard: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        :param parse_mode: –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        :return: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            self.bot.send_message(
                user_id,
                message,
                reply_markup=keyboard,
                parse_mode=parse_mode
            )
            logger.info(f"Notification sent to user {user_id}")
            return True
        except Exception as e:
            logger.error(f"Failed to notify user {user_id}: {e}")
            return False

    def notify_new_match(self, user_id: int, match_name: str, match_link: str) -> None:
        """
        –£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–æ–≤–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏

        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        :param match_name: –ò–º—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        :param match_link: –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
        """
        message = (
            f"üíå –ù–æ–≤—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Ç—á!\n\n"
            f"üë§ {match_name}\n"
            f"üîó {match_link}"
        )
        self.notify_user(user_id, message)

    def notify_error(self, user_id: int, error_type: str = "general") -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ

        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param error_type: –¢–∏–ø –æ—à–∏–±–∫–∏ (general/search/database)
        """
        messages = {
            "general": "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            "search": "üîç –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.",
            "database": "üõ† –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º."
        }
        self.notify_user(user_id, messages.get(error_type, messages["general"]))